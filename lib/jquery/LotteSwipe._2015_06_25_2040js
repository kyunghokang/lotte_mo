// var swipe = {} ; 
function Swipe ( target , slider , option ) {
  var tag = {} , opt = {} , pu = {} ;

  (function domSet () {
    tag.mother = target ; 
    // console.log( tag.mother ) ; 
    
    tag.ulBox = tag.mother.querySelector( slider ) ; 
    tag.li = tag.ulBox.children[0] ; 
    tag.nav = option.navigation ; 
    tag.navList = findChildren( tag.nav , ':scope > li') ;  
  }()) ; 

  (function objSet () {    
    opt.navListLen = tag.navList.length ; 
    opt.startX = 0 ; 
    opt.startY = 0 ; 
    opt.moveX = 0 ; 
    opt.addMoveX = 0 ; 
    opt.moveY = 0 ; 
    opt.dirX = null ; 
    opt.moveClass = 'stop' ;
    opt.activeClass= 'active' ;

    opt.ratio = option.dragRatio ? option.dragRatio : 2 ; 
    opt.durationSpeed = option.duration ? option.duration : .3 ; 
    opt.loopBool = option.loop ? option.loop : false ; 
    
    opt.verticalBool = false ; 
    opt.horizontalBool = false ; 
    opt.clickBool = true ; 
    opt.dragChkBool = true ; // 드래그 방향이 잡협는가에 대한 참,거짓을 반환 합니다.
    opt.moveBool = true ; 

    opt.motherW = tag.mother.offsetWidth ; 
    opt.liW = opt.motherW ; 
    opt.ulBoxW = opt.liW ; 

    opt.cNum = 0 ; // 현재 페이지에 들어올 값 
    opt.oldCNum = 0 ; 
  }()) ; 

  (function prepareSet () {
    var lis , 
      css = '-webkit-transition: all ' + opt.durationSpeed + 's; ' ; 
    css += '-moz-transition: all ' + opt.durationSpeed + 's; ' ; 
    css += '-o-transition: all ' + opt.durationSpeed + 's; ' ; 
    css += 'transition: all ' + opt.durationSpeed + 's; ' ; 

    document.styleSheets[0].insertRule('.stop { ' + css + ' }');

//     tag.li.style.width = opt.liW + 'px' ; 
//     tag.ulBox.style.width = opt.ulBoxW + 'px' ;
    
    // 새로 들어오는 네비게이션의 순번을 추가해준다. 
    [].forEach.call( tag.navList , function ( li , idx ){
    	li.setAttribute( 'data-idx' , idx ) ; 
    }) ;
    
//    tag.ulBox.style.height = '4000px' ;
//    tag.ulBox.style.width = '644px' ;
//    tag.ulBox.style.backgroundColor = 'red' ; 
    
     // addBox () ; 
  }()) ; 

  (function evtSet () {
    // addEvents( tag.ulBox , 'touchstart touchmove touchend' , swipeHandler ) ;
	  
    addEvents( tag.ulBox , 'touchstart' , swipeStartHandler ) ; 
    addEvents( tag.ulBox , 'touchmove' , swipeMoveHandler ) ; 
    addEvents( tag.ulBox , 'touchend' , swipeEndHandler ) ;

//    addEvents( window , 'touchstart' , swipeStartHandler ) ; 
//    addEvents( window , 'touchmove' , swipeMoveHandler ) ; 
//    addEvents( window , 'touchend' , swipeEndHandler ) ;

    [].forEach.call( tag.navList , function ( el , idx ) {
      el.addEventListener( 'click' , clickHandler ) ; 
    }) ; 

    window.addEventListener( 'resize' , resizeHandler ) ; 
  }()) ; 

  function resizeHandler () {
  } // end of resizeHandler

  function clickHandler (e) {
    var btn = this , 
      addIdx = parseInt(btn.dataset.idx) , 
      box , 
      li ;
  } // end of clickHandler

  function addBox () {
    var box = tag.descBoxs[opt.cNum] , 
    li = findChildren( tag.ulBox , 'li:first-child' ) ; 

    li.setAttribute( 'data-cnum' , opt.cNum ) ; 
    li.appendChild( box.cloneNode(true) ) ; 
    // tag.ulBox.querySelector( 'li:first-child' ).appendChild( box.cloneNode(true) ) ;   
  }

  function swipeStartHandler (e) {
    var m = e.touches[0] ;
    // console.log( 'swipeStartHandler' ) ; 
    opt.startX = m.pageX ; 
    opt.startY = m.pageY ; 
    rect = tag.ulBox.getBoundingClientRect() ; 
    opt.oldCNum = opt.cNum ; 
  }

  function swipeMoveHandler (e) {
	// console.log( tag.ulBox ) ;
	// console.log( '- swipeMoveHandler' , 'opt.moveBool : ' , opt.moveBool ) ;
    if ( !opt.moveBool ) return ;
    
    mainApp.swipeInfo.swipeBool = true ; 
     
    var m = e.touches[0] ; 
    opt.pageX = m.pageX ; 
    opt.pageY = m.pageY ; 

    opt.moveX = Math.abs(m.pageX - opt.startX) ; 
    opt.moveY = Math.abs(m.pageY - opt.startY) ; 

    if ( opt.verticalBool ) {
      tag.ulBox.style.webkitTransform  = "translateX(" + 0 + "px) translateZ(0px)";
      // tag.ulBox.style.width = opt.liW + 'px' ; 
      tag.mother.style.width = opt.liW + 'px' ; 
      return ; 
    }
    
    if ( opt.dragChkBool ) {
      if ( opt.moveX > opt.moveY ) {
        opt.horizontalBool = true ; 
        opt.verticalBool = false ; 
      } else if ( opt.moveY > opt.moveX ) {
        opt.horizontalBool = false ; 
        opt.verticalBool = true ; 
      }
    }

    opt.dragChkBool = false ; 

//     console.log( 
//       'opt.moveX : ' , opt.moveX , 
//       'opt.moveY : ' , opt.moveY , 
//       'opt.horizontalBool : ' , opt.horizontalBool , 
//       'opt.verticalBool : ' , opt.verticalBool 
//     )

    if ( opt.horizontalBool ) {
        e.preventDefault() ; 
        e.stopPropagation() ;
        
        opt.moveX = opt.startX - m.pageX ; 
        opt.dirX = opt.moveX < 0 ? -1 : 1 ; 
        
        mainApp.swipeInfo.transBool = true ; 

        appendList() ; 
        
        // horizontalMove( -(opt.moveX - rect.left ) + opt.addMoveX ) ;
        horizontalMove( -(opt.moveX - rect.left ) ) ;
    }
  } // end of swipeMoveHandler

  function swipeEndHandler (e) {
    var m = e.touches[0] ;
    
    if ( opt.horizontalBool ) {
      horizontalEnd() ; 
    }

    opt.dragChkBool = true ; 
    opt.verticalBool = false ; 
    opt.horizontalBool = false ; 
  }

  function appendList () {
    var lis = findChildren( tag.ulBox , ':scope > li' ) , 
      li = document.createElement( 'li' ) ,  
      box ; 

    // console.log( 'opt.cNum : ' , opt.cNum , 'opt.dirX : ' , opt.dirX , 'lis.length : ' , lis.length , 'opt.addMoveX : ' , opt.addMoveX , 'opt.moveX : ' , opt.moveX ) ;
    // console.log( 'lis.length : ' , lis.length , 'opt.dirX : ' , opt.dirX , 'opt.addMoveX : ' , opt.addMoveX , 'opt.moveX : ' , opt.moveX ) ; 
    
    li.style.position = 'absolute' ;
    li.top = 0 + 'px' ; 
    li.style.width = opt.liW + 'px' ;
    li.setAttribute( 'data-clone' , 'added' ) ; 
    
    if ( lis.length == 1 && opt.dirX == 1 ) {
      // console.log( '리스트가 하나 이며 좌측 드래그인 경우' ) ; 
      li.style.right = - opt.liW + 'px' ;
      tag.ulBox.appendChild( li ) ;
      
      // console.log( 'mainApp.swipeInfo.subNumCurrent : ' , mainApp.swipeInfo.subNumCurrent , 'opt.dirX : ' , opt.dirX ) ;
      var ollis = document.querySelectorAll( '[dom-load-directive2]' ) ;
      [].forEach.call( ollis , function ( el , idx , arr ){
    	  el.removeAttribute( 'dom-load-directive2' ) ;
    	  
    	  
    	  if ( idx == arr.length -1) {
    		  console.log( 'nav : ' , mainApp.swipeInfo.subNumCurrent , opt.navListLen - 1 ) ; 
	          if ( mainApp.swipeInfo.subNumCurrent != opt.navListLen - 1 ) {
		          mainApp.swipeInfo.subNumNew = mainApp.swipeInfo.subNumCurrent + 1 ;
		          mainApp.swipeInfo.swipeBool = true ; 
		          mainApp.swipeInfo.onClickTab( mainApp.swipeInfo.mainTabsCatesub[mainApp.swipeInfo.subNumNew] ) ;	        	  
	          }
    	  }
      }) ;
      
      opt.cNum = opt.cNum + 1 >= opt.navListLen ? 0 : opt.cNum + 1 ; 
      opt.addMoveX = 0 ;
    } else if ( lis.length > 1 && opt.dirX == -1 && opt.addMoveX == 0 && opt.moveX < 0 ) {
    	// console.log( '리스트가 두개 이며 하나를 삭제해야하며 우측 드래그인 경우' ) ;
    	[].forEach.call( lis , function ( li , idx ) { 
    		if( li.dataset.clone == "added" ) {
    			li.parentNode.removeChild( li ) ; 
    		}
    	}) ; 
//      opt.cNum = parseInt(findChildren( tag.ulBox , ':scope > li:first-child').dataset.cnum) ;
    }

    if ( lis.length == 1 && opt.dirX == -1 ) {
    	// console.log( '리스트가 하나 이며 우축 드래그인 경우' ) ;
        li.style.left= - opt.liW + 'px' ; 
        tag.ulBox.appendChild( li ) ;
        opt.addMoveX = -opt.liW ;

        if ( mainApp.swipeInfo.subNumCurrent != 0 ) {
	        mainApp.swipeInfo.subNumNew = mainApp.swipeInfo.subNumCurrent - 1 ;
	        mainApp.swipeInfo.swipeBool = true ; 
	        mainApp.swipeInfo.onClickTab( mainApp.swipeInfo.mainTabsCatesub[mainApp.swipeInfo.subNumNew] ) ;
        }
        
    } else if ( opt.dirX > 0 && lis.length > 1 && opt.addMoveX < 0 && opt.moveX >= 0 ) {
    	[].forEach.call( lis , function ( li , idx ) { 
    		if( li.dataset.clone == "added" ) {
    			li.parentNode.removeChild( li ) ; 
    		}
    	}) ;  
//      opt.cNum = opt.cNum + 1 >= opt.navListLen ? 0 : opt.cNum + 1 ;
//      opt.addMoveX = 0 ;  
    }
  }

  function addEvents ( el , evts , handler ) {
    var evts = evts.split( ' ' ) ; 
    evts.forEach( function ( evt ){
      el.addEventListener( evt , handler , false ) ; 
    }) ; 
  } // end of addEvents

  function removeEvents ( el , evts , handler ) {
    var evts = evts.split( ' ' ) ; 
    evts.forEach( function ( evt ){
      el.removeEventListener( evt , handler , false ) ; 
    }) ; 
  }

  function horizontalMove ( moveX ) { 
    // console.log( 'moveX : ' ,  opt.moveX , rect.left , opt.addMoveX ) ;
	// console.log( 'tag.ulBox : ' , tag.ulBox ) ; 
    tag.ulBox.style.webkitTransform  = "translateX(" + moveX + "px) translateZ(0px)";
  } // end of horizontalMove 

  function horizontalEnd () {
    var evts = [ 'webkitTransitionEnd' , 'transitionend' ] , 
      lis = findChildren( tag.ulBox , ':scope > li' ) , 
      dep = 0 , cIdx ; 
    
    opt.moveBool = false ; 
    // console.log( 'opt.dirX : ' , opt.dirX , 'opt.moveX : ' , opt.moveX , 'opt.liW / opt.ratio : ' , opt.liW / opt.ratio ) ; 

    if ( opt.liW / opt.ratio <= opt.moveX && opt.dirX > 0 ) {
      // console.log( '왼쪽 드래그시 브라우저 반이 넘어갔을 경우' ) ; 
      if ( mainApp.swipeInfo.subNumCurrent == opt.navListLen - 1 ) {
    	  dep = 0 ;
      } else {
    	  dep = 1 ;
      }
    } else if ( opt.liW / opt.ratio > opt.moveX && opt.dirX > 0 ) {
      // console.log( '왼쪽 드래그시 브라우저 반이 안넘어갔을 경우' ) ; 
      dep = 0 ; 
      opt.cNum -= 1 ; 
    }
    
    if ( opt.liW / opt.ratio <= Math.abs( opt.moveX ) && opt.dirX < 0 ) {
      // console.log( '// 오른쪽 드래그시 브라우저 반이 넘어갔을 경우' , mainApp.swipeInfo.subNumCurrent ) ;
      if ( mainApp.swipeInfo.subNumCurrent == 0 ) {
    	  dep = 0 ;
      } else {
    	  dep = -1 ;
      }
    } else if ( opt.liW / opt.ratio > Math.abs( opt.moveX ) && opt.dirX < 0 ) {
      // console.log( '오른쪽 드래그시 브라우저 반이 안넘어갔을 경우' ) ; 
      dep = 0 ; 
    }

    if ( lis.length <= 1 ) {
      dep = 0 ; 
    }

    // console.log( 'opt.dirX : ' , opt.dirX , 'dep : ' , dep ) ; 

    setTimeout(function(){
      tag.ulBox.classList.add( opt.moveClass );
      horizontalMove( -dep * opt.liW ) ; 

      var evts = [ 'webkitTransitionEnd' , 'transitionend' ] ;
      [].forEach.call( evts , function ( evt , idx ){
        tag.ulBox.addEventListener( evt , function chkF () {
           transFunc() ;
          tag.ulBox.classList.remove( opt.moveClass ) ;
          tag.ulBox.removeEventListener( evt , chkF ) ;
        }) ; 
      }) ; 
    } , 10 ) ; 

    function transFunc () {
      var li , 
        lis = findChildren( tag.ulBox , ':scope > li' ) , 
        rect = tag.ulBox.getBoundingClientRect() ;
      
      mainApp.swipeInfo.addBool = true ;

      [].forEach.call( lis , function ( el , idx ){
        if ( rect.left == 0 ) {
        	console.log( '화면 변화가 없을 경우' ) ; 
        	mainApp.swipeInfo.subNumCurrent = mainApp.swipeInfo.subNumCurrent ;
        	console.log( 'mainApp.swipeInfo.subNumCurrent : ' , mainApp.swipeInfo.subNumCurrent ) ;
        	if( el.dataset.clone == "added" ) {
        		
        		el.parentNode.removeChild( el ) ;
//        		var ol = el.querySelector( 'ol.list' ) , 
//        			olLis = findChildren( ol , ':scope > li' ) ;
//        		[].forEach.call( olLis , function ( olLi , idx ) {
//        			olLi.removeAttribute( 'dom-load-directive2' ) ;
//        		}) ; 
        	} 
            tag.ulBox.style.webkitTransform  = "translateX(" + 0 + "px) translateZ(0px)"; 
            // mainApp.swipeInfo.swipeBool = false ;
        } else {
        	// 화면 변화가 있을 경우
        	
        	// console.log( 'chkchk????' , lis ) ;
        	function domChkFunc () {
              if ( lis.length == 2 && lis[1].dataset.clone == 'added' ) {
                console.log( 'chkchk!!!!' , lis ) ;
                
                mainApp.swipeInfo.subNumCurrent = mainApp.swipeInfo.subNumNew ;
	           	if( el.dataset.clone != "added" ) {
	        		el.parentNode.removeChild( el ) ;
	        	} else { 
	        		el.removeAttribute( 'style' ) ;
	        		el.removeAttribute( 'data-clone' ) ;
	        	}
	
	            tag.ulBox.style.webkitTransform  = "translateX(" + 0 + "px) translateZ(0px)";
	            mainApp.swipeInfo.swipeBool = false ;                
              } else {
            	  setTimeout(function(){
            		  console.log( '----------------------------------------' ) ; 
            		  domChkFunc() ; 
            	  }) ; 
              }
        	}
        	domChkFunc() ; 
        }
      }) ;
      


      if ( opt.oldCNum != opt.cNum ) {
        tag.mother.scrollTop = 0 ; 
      }
      
      opt.moveBool = true ;
      
      if ( mainApp.swipeInfo.subNumCurrent >= opt.navListLen - 1 ) return ;
      // console.log( 'mainApp.swipeInfo.subNumCurrent : ' , mainApp.swipeInfo.subNumCurrent ) ;

      var chkWidth = 0 ;
      [].forEach.call( tag.navList , function ( list , idx ) {
    	  if ( list.classList.contains( opt.activeClass ) ) {
    		  var i = 0 , len = idx + 1 ;
    	      for ( ; i <= len ; i += 1 ) {
        		  chkWidth += tag.navList[i].offsetWidth ;
    	      }
    	  }
      }) ; 
      
      if ( chkWidth >= window.innerWidth ) {
    	var _w = chkWidth - window.innerWidth ; 
        tag.navList[0].style.marginLeft = -_w + 'px' ;
      } else {
    	  tag.navList[0].style.marginLeft = 0 + 'px' ;
      }
    }
  } // end of horizontalEnd
  
  pu.opt = opt ; 
  this.pu = pu ; 
  
} // end of Swipe 
Swipe.prototype = {
  chk : function () {
	
  } , 
  getMoveBool : function () {
	  return this.pu.opt.moveBool ; 
  } , 
  getDragChkBool : function () {
	  return this.pu.opt.dragChkBool ; 
  }
  
} ; 













function findChildren ( motherDom , findStr ) {
  // alert( motherDom + ' . ' + findStr ) ; 
  var findStr = findStr.replace(/((^|,)\s*):scope > /g, '' ) , 
    firstChk = false , 
    lastChk = false , 
    resArr = [] , 
    findDom ; 

  if ( findStr.indexOf( ':first-child' ) != -1 ) {

    firstChk = true ; 
    findStr = findStr.replace(':first-child', '' ) ; 
  } else if ( findStr.indexOf( ':last-child' ) != -1 ) {
    lastChk = true ; 
    findStr = findStr.replace(':last-child', '' ) ; 
  }

  findDom = motherDom.querySelectorAll( findStr ) ; 
  [].forEach.call( findDom , function ( el , idx ) {
    if ( el.parentNode == motherDom ) {
      resArr.push( el ) ; 
    }
  }) ; 

  if ( firstChk ) resArr = resArr[0] ; 
  if ( lastChk ) resArr = resArr[resArr.length-1] ; 
  return resArr ; 
} // end of findChildren



window.addEventListener( 'load' , function () {
//  swipe = new Swipe( document.querySelector( 'div.wrapBox' ) , '.container' , {
//    navigation : document.querySelector( 'ul.nav' ) , 
//    loop : true , 
//    dragRatio : 5 , 
//    duration : .3
//  }) ; 
}) ;

var colorCode = function () {
    return '#' + ((1<<24)*Math.random()|0).toString(16);
}